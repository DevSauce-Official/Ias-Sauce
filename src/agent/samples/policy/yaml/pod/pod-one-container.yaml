---
apiVersion: v1
kind: Pod
metadata:
  name: one-container
  labels:
    run: busybox
  annotations:
    io.katacontainers.config.agent.policy: 
spec:
  restartPolicy: Never
  runtimeClassName: kata-cc
  securityContext:
    runAsUser: 1000
  containers:
    - name: busybox
      image: "mcr.microsoft.com/aks/e2e/library-busybox:master.220314.1-linux-amd64"
      stdin: true
      env:
        - name: POD_NAME
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.name
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.namespace
        - name: POD_IP
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: status.podIP
        - name: SERVICE_ACCOUNT
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: spec.serviceAccountName
        - name: PROXY_CONFIG
          value: "{}\n"
        - name: ISTIO_META_POD_PORTS
          value: "[\n]"
        - name: ISTIO_META_APP_CONTAINERS
          value: serviceaclient
        - name: ISTIO_META_CLUSTER_ID
          value: Kubernetes
        - name: ISTIO_META_NODE_NAME
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: spec.nodeName
      securityContext:
        runAsUser: 1001
      command:
        - /bin/sh
      args:
        - "-c"
        - while true; do echo $(POD_NAME); sleep 10; done
      lifecycle:
        postStart:
          exec:
            command:
              - /bin/sh
              - "-c"
              - echo Hello from the postStart handler
