---
apiVersion: v1
kind: Namespace
metadata:
  name: job-4436
---
apiVersion: v1
kind: Pod
metadata:
  annotations:
    batch.kubernetes.io/job-completion-index: "0"
    io.katacontainers.config.agent.policy: 
  creationTimestamp: ~
  generateName: indexed-job-0-
  labels:
    controller-uid: e239ff37-c75a-4f25-bac6-e2335502f4ef
    job: indexed-job
    job-name: indexed-job
  managedFields:
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        "f:metadata":
          "f:annotations":
            ".": {}
            "f:batch.kubernetes.io/job-completion-index": {}
          "f:generateName": {}
          "f:labels":
            ".": {}
            "f:controller-uid": {}
            "f:job": {}
            "f:job-name": {}
          "f:ownerReferences":
            ".": {}
            "k:{\"uid\":\"e239ff37-c75a-4f25-bac6-e2335502f4ef\"}": {}
        "f:spec":
          "f:containers":
            "k:{\"name\":\"c\"}":
              ".": {}
              "f:command": {}
              "f:env":
                ".": {}
                "k:{\"name\":\"JOB_COMPLETION_INDEX\"}":
                  ".": {}
                  "f:name": {}
                  "f:valueFrom":
                    ".": {}
                    "f:fieldRef": {}
              "f:image": {}
              "f:imagePullPolicy": {}
              "f:name": {}
              "f:resources": {}
              "f:securityContext": {}
              "f:terminationMessagePath": {}
              "f:terminationMessagePolicy": {}
              "f:volumeMounts":
                ".": {}
                "k:{\"mountPath\":\"/data\"}":
                  ".": {}
                  "f:mountPath": {}
                  "f:name": {}
          "f:dnsPolicy": {}
          "f:enableServiceLinks": {}
          "f:hostname": {}
          "f:restartPolicy": {}
          "f:schedulerName": {}
          "f:securityContext": {}
          "f:terminationGracePeriodSeconds": {}
          "f:volumes":
            ".": {}
            "k:{\"name\":\"data\"}":
              ".": {}
              "f:emptyDir": {}
              "f:name": {}
      manager: kube-controller-manager
      operation: Update
      time: "2023-06-20T21:22:55Z"
  namespace: job-4436
spec:
  containers:
    - command:
        - /bin/sh
      env:
        - name: JOB_COMPLETION_INDEX
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: "metadata.annotations['batch.kubernetes.io/job-completion-index']"
      image: "registry.k8s.io/e2e-test-images/busybox:1.29-2"
      imagePullPolicy: IfNotPresent
      name: c
      resources: {}
      securityContext: {}
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
        - mountPath: /data
          name: data
        - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
          name: kube-api-access-gck5t
          readOnly: true
  dnsPolicy: ClusterFirst
  enableServiceLinks: true
  hostname: indexed-job-0
  preemptionPolicy: PreemptLowerPriority
  priority: 0
  restartPolicy: Never
  runtimeClassName: kata-cc
  schedulerName: default-scheduler
  securityContext: {}
  serviceAccount: default
  serviceAccountName: default
  terminationGracePeriodSeconds: 30
  tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
  volumes:
    - emptyDir: {}
      name: data
    - name: kube-api-access-gck5t
      projected:
        defaultMode: 420
        sources:
          - serviceAccountToken:
              expirationSeconds: 3607
              path: token
          - configMap:
              items:
                - key: ca.crt
                  path: ca.crt
              name: kube-root-ca.crt
          - downwardAPI:
              items:
                - fieldRef:
                    apiVersion: v1
                    fieldPath: metadata.namespace
                  path: namespace
status: {}
