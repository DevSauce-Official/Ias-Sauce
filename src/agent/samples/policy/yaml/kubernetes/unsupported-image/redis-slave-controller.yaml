---
apiVersion: v1
kind: ReplicationController
metadata:
  name: redis-slave
  labels:
    app: redis
    role: slave
    tier: backend
spec:
  replicas: 2
  template:
    metadata:
      labels:
        app: redis
        role: slave
        tier: backend
      annotations:
        io.katacontainers.config.agent.policy: 
    spec:
      runtimeClassName: kata-cc
      containers:
        - name: slave
          image: "docker.io/library/redis:5.0.5-alpine"
          env:
            - name: GET_HOSTS_FROM
              value: dns
          resources:
            requests:
              cpu: 100m
              memory: 100Mi
          ports:
            - containerPort: 6379
          command:
            - redis-server
            - "--slaveof"
            - redis-master
            - "6379"
