---
apiVersion: v1
kind: Namespace
metadata:
  name: svcaccounts-8341
---
apiVersion: v1
kind: Pod
metadata:
  creationTimestamp: ~
  managedFields:
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        "f:spec":
          "f:containers":
            "k:{\"name\":\"agnhost-container\"}":
              ".": {}
              "f:args": {}
              "f:image": {}
              "f:imagePullPolicy": {}
              "f:name": {}
              "f:resources": {}
              "f:securityContext": {}
              "f:terminationMessagePath": {}
              "f:terminationMessagePolicy": {}
              "f:volumeMounts":
                ".": {}
                "k:{\"mountPath\":\"/test-volume\"}":
                  ".": {}
                  "f:mountPath": {}
                  "f:name": {}
                  "f:readOnly": {}
          "f:dnsPolicy": {}
          "f:enableServiceLinks": {}
          "f:restartPolicy": {}
          "f:schedulerName": {}
          "f:securityContext": {}
          "f:terminationGracePeriodSeconds": {}
          "f:volumes":
            ".": {}
            "k:{\"name\":\"test-volume\"}":
              ".": {}
              "f:name": {}
              "f:projected":
                ".": {}
                "f:defaultMode": {}
                "f:sources": {}
      manager: e2e.test
      operation: Update
      time: "2023-06-20T21:07:26Z"
  name: test-pod-98011b43-2060-4473-a3bd-c5622997e4a7
  namespace: svcaccounts-8341
  annotations:
    io.katacontainers.config.agent.policy: 
spec:
  containers:
    - command:
        - sh
      image: "registry.k8s.io/e2e-test-images/agnhost:2.40"
      imagePullPolicy: IfNotPresent
      name: agnhost-container
      resources: {}
      securityContext: {}
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
        - mountPath: /test-volume
          name: test-volume
          readOnly: true
        - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
          name: kube-api-access-f8d29
          readOnly: true
  dnsPolicy: ClusterFirst
  enableServiceLinks: true
  preemptionPolicy: PreemptLowerPriority
  priority: 0
  restartPolicy: Never
  runtimeClassName: kata-cc
  schedulerName: default-scheduler
  securityContext: {}
  serviceAccount: default
  serviceAccountName: default
  terminationGracePeriodSeconds: 0
  tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
  volumes:
    - name: test-volume
      projected:
        defaultMode: 420
        sources:
          - serviceAccountToken:
              expirationSeconds: 3600
              path: token
    - name: kube-api-access-f8d29
      projected:
        defaultMode: 420
        sources:
          - serviceAccountToken:
              expirationSeconds: 3607
              path: token
          - configMap:
              items:
                - key: ca.crt
                  path: ca.crt
              name: kube-root-ca.crt
          - downwardAPI:
              items:
                - fieldRef:
                    apiVersion: v1
                    fieldPath: metadata.namespace
                  path: namespace
status: {}
